//Hawkeye Cache Replacement Tool v2.0
//UT AUSTIN RESEARCH LICENSE (SOURCE CODE)
//The University of Texas at Austin has developed certain software and documentation that it desires to
//make available without charge to anyone for academic, research, experimental or personal use.
//This license is designed to guarantee freedom to use the software for these purposes. If you wish to
//distribute or make other use of the software, you may purchase a license to do so from the University of
//Texas.
///////////////////////////////////////////////
//                                            //
//     Hawkeye [Jain and Lin, ISCA' 16]       //
//     Akanksha Jain, akanksha@cs.utexas.edu  //
//                                            //
///////////////////////////////////////////////

// Source code for configs 1 and 2
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

ofstream fout("last.txt");
ofstream eout("curr.txt");
#include "cache.h"
#include <map>

#define NUM_CORE 1
#define LLC_SETS NUM_CORE*2048
#define LLC_WAYS 16

//3-bit RRIP counters or all lines
#define maxRRPV 7
uint32_t rrpv[LLC_SETS][LLC_WAYS];


//Per-set timers; we only use 64 of these
//Budget = 64 sets * 1 timer per set * 10 bits per timer = 80 bytes
#define TIMER_SIZE 1024
uint64_t perset_mytimer[LLC_SETS];

// Signatures for sampled sets; we only use 64 of these
// Budget = 64 sets * 16 ways * 12-bit signature per line = 1.5B
uint64_t signatures[LLC_SETS][LLC_WAYS];
bool prefetched[LLC_SETS][LLC_WAYS];

#define MAX_SHCT 31
#define SHCT_SIZE_BITS 11
#define SHCT_SIZE (1<<SHCT_SIZE_BITS)
#include "hawkeye_predictor.h"
HAWKEYE_PC_PREDICTOR* demand_predictor;  //Predictor
HAWKEYE_PC_PREDICTOR* prefetch_predictor;  //Predictor

#define OPTGEN_VECTOR_SIZE 128
#include "optgen_revised.h"
OPTgen perset_optgen[LLC_SETS]; // per-set occupancy vectors; we only use 64 of these

vector<map<uint64_t, ADDR_INFO> > addr_history; // Sampler

// sacusa: structures for additional data
uint64_t num_of_evictions;
uint64_t num_of_cache_friendly_evictions;

uint64_t global_access_timer = 0;

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
	
		
	for (int i=0; i<LLC_SETS; i++) {
        for (int j=0; j<LLC_WAYS; j++) {
            rrpv[i][j] = maxRRPV;
            signatures[i][j] = 0;
            prefetched[i][j] = false;
        }
        perset_mytimer[i] = 0;
        perset_optgen[i].init(LLC_WAYS);
    }

    addr_history.resize(LLC_SETS);
    for (int i=0; i<LLC_SETS; i++) 
        addr_history[i].clear();

    demand_predictor = new HAWKEYE_PC_PREDICTOR();
    prefetch_predictor = new HAWKEYE_PC_PREDICTOR();

    cout << "Initialize Hawkeye state" << endl;

    // sacusa
    num_of_evictions = 0;
    num_of_cache_friendly_evictions = 0;
}

// find replacement victim
// return value should be 0 ~ 15 or 16 (bypass)
uint32_t CACHE::llc_find_victim (uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t PC, uint64_t paddr, uint32_t type)
{
    // sacusa: data to compute percentage of cache friendly evictions
    num_of_evictions++;

    // look for the maxRRPV line
    for (uint32_t i=0; i<LLC_WAYS; i++)
        if (rrpv[set][i] == maxRRPV)
            return i;

    //If we cannot find a cache-averse line, we evict the oldest cache-friendly line
    num_of_cache_friendly_evictions++;
    uint32_t max_rrip = 0;
    int32_t lru_victim = -1;
    for (uint32_t i=0; i<LLC_WAYS; i++)
    {
        if (rrpv[set][i] >= max_rrip)
        {
            max_rrip = rrpv[set][i];
            lru_victim = i;
        }
    }

    assert (lru_victim != -1);
	return lru_victim;
    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

void replace_addr_history_element(unsigned int sampler_set)
{
    uint64_t lru_addr = 0;
    
    for(map<uint64_t, ADDR_INFO>::iterator it=addr_history[sampler_set].begin(); it != addr_history[sampler_set].end(); it++)
    {
   //     uint64_t timer = (it->second).last_quanta;

        if((it->second).lru == (OPTGEN_VECTOR_SIZE-1))
        {
            //lru_time =  (it->second).last_quanta;
            lru_addr = it->first;
            break;
        }
    }

    addr_history[sampler_set].erase(lru_addr);
}

void update_addr_history_lru(unsigned int sampler_set, unsigned int curr_lru)
{
    for(map<uint64_t, ADDR_INFO>::iterator it=addr_history[sampler_set].begin(); it != addr_history[sampler_set].end(); it++)
    {
        if((it->second).lru < curr_lru)
        {
            (it->second).lru++;
            assert((it->second).lru < OPTGEN_VECTOR_SIZE); 
        }
    }
}


// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state (uint32_t cpu, uint32_t set, uint32_t way, uint64_t paddr, uint64_t PC, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
	/*if(PC) {
		fout << "curr time : " << to_string(global_access_timer) << ", curr PC : " << to_string(PC);
	} 
	*/   
	paddr = (paddr >> 6) << 6;
	
   
    if(1)
    {
        //The current timestep 
        uint64_t curr_quanta = perset_mytimer[set] % OPTGEN_VECTOR_SIZE;

        uint32_t sampler_set = (paddr >> 6) % LLC_SETS; 
        uint64_t sampler_tag = paddr >> 17;
        assert(sampler_set < LLC_SETS);

      
        if(addr_history[sampler_set].size() == OPTGEN_VECTOR_SIZE) 
            replace_addr_history_element(sampler_set);
       
        assert(addr_history[sampler_set].size() < OPTGEN_VECTOR_SIZE);

        // This line has been used before.  
        if((addr_history[sampler_set].find(sampler_tag) != addr_history[sampler_set].end()) && (type != PREFETCH))
        {
            uint64_t last_quanta = addr_history[sampler_set][sampler_tag].last_quanta % OPTGEN_VECTOR_SIZE;
            
			fout << "curr time : " << to_string(global_access_timer) << ", curr PC : " << to_string(PC);
			fout << ", last time : " << to_string(addr_history[sampler_set][sampler_tag].global_access_timer) << ", last PC : " 
							<< to_string(addr_history[sampler_set][sampler_tag].PC); 
			if(perset_optgen[set].should_cache(curr_quanta, last_quanta))
            {
                demand_predictor->increment(addr_history[sampler_set][sampler_tag].PC);
				fout << ", 1"; 
            }
            else
            {
                demand_predictor->decrement(addr_history[sampler_set][sampler_tag].PC);
				fout << ", 0";

            }
			if(PC == addr_history[sampler_set][sampler_tag].PC)
			{
				fout << ", same" <<endl;
			}
			else 
			{
				fout << ", diff" <<endl;
			}		
            //Some maintenance operations for OPTgen
            perset_optgen[set].add_access(curr_quanta);
            update_addr_history_lru(sampler_set, addr_history[sampler_set][sampler_tag].lru);

        }
        // This is the first time we are seeing this line
        else if(addr_history[sampler_set].find(sampler_tag) == addr_history[sampler_set].end())
        {          
			fout << "curr time : " << to_string(global_access_timer) << ", curr PC : " << to_string(PC) << ", no history " <<endl;

        	addr_history[sampler_set][sampler_tag].init();
            perset_optgen[set].add_access(curr_quanta);
            update_addr_history_lru(sampler_set, OPTGEN_VECTOR_SIZE-1);
        }
        
		bool new_prediction = demand_predictor->get_prediction (PC);
        // Update the sampler with the timestamp, PC and our prediction
        // For prefetches, the PC will represent the trigger PC
        addr_history[sampler_set][sampler_tag].update(perset_mytimer[set], PC, new_prediction, global_access_timer++);
        addr_history[sampler_set][sampler_tag].lru = 0;
        //Increment the set timer
        perset_mytimer[set]++;
    }

	bool new_prediction = demand_predictor->get_prediction(PC);
    signatures[set][way] = PC;

    //Set RRIP values and age cache-friendly line
    if(!new_prediction)
        rrpv[set][way] = maxRRPV;
    else
    {
        rrpv[set][way] = 0;
        if(!hit)
        {
            bool saturated = false;
            for(uint32_t i=0; i<LLC_WAYS; i++)
                if (rrpv[set][i] == maxRRPV-1)
                    saturated = true;

            //Age all the cache-friendly  lines
            for(uint32_t i=0; i<LLC_WAYS; i++)
            {
                if (!saturated && rrpv[set][i] < maxRRPV-1)
                    rrpv[set][i]++;
            }
        }
        rrpv[set][way] = 0;
    }
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
    unsigned int hits = 0;
    unsigned int demand_accesses = 0;
    unsigned int prefetch_accesses = 0;
    for(unsigned int i=0; i<LLC_SETS; i++)
    {
        demand_accesses += perset_optgen[i].demand_access;
        prefetch_accesses += perset_optgen[i].prefetch_access;
        hits += perset_optgen[i].get_num_opt_hits();
    }
	
	fout << "OPTgen hit rate: " << 100*(double)hits/(double)demand_accesses << endl;
	fout.close();
	
    std::cout << "OPTgen demand accesses: " << demand_accesses << std::endl;
    std::cout << "OPTgen prefetch accesses: " << prefetch_accesses << std::endl;
    std::cout << "OPTgen hits: " << hits << std::endl;
    std::cout << "OPTgen hit rate: " << 100*(double)hits/((double)demand_accesses + (double)prefetch_accesses) << std::endl;
    std::cout << "Number of evictions: " << num_of_evictions << std::endl;
    std::cout << "Number of cache-friendly evictions: " << num_of_cache_friendly_evictions << std::endl;

    cout << endl << endl;
    return;
}
